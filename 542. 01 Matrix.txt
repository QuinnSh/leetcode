public List<List<Integer>> updateMatrix(List<List<Integer>> matrix) {  
    if (matrix == null || matrix.size() == 0)  
        return matrix;  
    int m = matrix.size();  
    int n = matrix.get(0).size();  
    Queue<int[]> q = new LinkedList<>();  
    for (int i = 0; i < m; i++)  
        for (int j = 0; j < n; j++) {  
            // 把0元素加入队列中，以备波及影响周围元素  
            if (matrix.get(i).get(j) == 0)  
                q.offer(new int[] { i, j });  
            else  
                // 设为最大值，方便求0元素影响值  
                matrix.get(i).set(j, Integer.MAX_VALUE);  
        }  
    // 上下左右  
    int[][] dirs = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };  
    while (!q.isEmpty()) {  
        int cell[] = q.poll();  
        for (int[] d : dirs) {  
            int row = cell[0] + d[0];  
            int col = cell[1] + d[1];  
            if (row < 0 || row >= m || col < 0 || col >= n)  
                continue;  
            // 上下左右取到的值  
            int value = matrix.get(row).get(col);  
            int tmp = matrix.get(cell[0]).get(cell[1]) + 1;  
            // 如果value小，那说明之前已经更新过，不是max  
            if (value <= tmp)  
                continue;  
            q.offer(new int[] { row, col });  
            matrix.get(row).set(col, tmp);  
  
        }  
  
    }  